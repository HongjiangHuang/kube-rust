/*
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AuthenticationV1ApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AuthenticationV1ApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AuthenticationV1ApiClient<C> {
        AuthenticationV1ApiClient {
            configuration,
        }
    }
}

pub trait AuthenticationV1Api {
    fn create_token_review(&self, body: crate::models::V1TokenReview, dry_run: Option<&str>, field_manager: Option<&str>, pretty: Option<&str>) -> Box<dyn Future<Item = crate::models::V1TokenReview, Error = Error<serde_json::Value>>>;
    fn get_api_resources(&self, ) -> Box<dyn Future<Item = crate::models::V1ApiResourceList, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>AuthenticationV1Api for AuthenticationV1ApiClient<C> {
    fn create_token_review(&self, body: crate::models::V1TokenReview, dry_run: Option<&str>, field_manager: Option<&str>, pretty: Option<&str>) -> Box<dyn Future<Item = crate::models::V1TokenReview, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/apis/authentication.k8s.io/v1/tokenreviews".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
        ;
        if let Some(ref s) = dry_run {
            req = req.with_query_param("dryRun".to_string(), s.to_string());
        }
        if let Some(ref s) = field_manager {
            req = req.with_query_param("fieldManager".to_string(), s.to_string());
        }
        if let Some(ref s) = pretty {
            req = req.with_query_param("pretty".to_string(), s.to_string());
        }
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn get_api_resources(&self, ) -> Box<dyn Future<Item = crate::models::V1ApiResourceList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/apis/authentication.k8s.io/v1/".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

}
