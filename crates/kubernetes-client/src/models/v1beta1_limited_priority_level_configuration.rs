/*
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// V1beta1LimitedPriorityLevelConfiguration : LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:  * How are requests for this priority level limited?  * What should be done with requests that exceed the limit?



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1beta1LimitedPriorityLevelConfiguration {
    /// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
    #[serde(rename = "assuredConcurrencyShares", skip_serializing_if = "Option::is_none")]
    pub assured_concurrency_shares: Option<i32>,
    #[serde(rename = "limitResponse", skip_serializing_if = "Option::is_none")]
    pub limit_response: Option<Box<crate::models::V1beta1LimitResponse>>,
}

impl V1beta1LimitedPriorityLevelConfiguration {
    /// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:  * How are requests for this priority level limited?  * What should be done with requests that exceed the limit?
    pub fn new() -> V1beta1LimitedPriorityLevelConfiguration {
        V1beta1LimitedPriorityLevelConfiguration {
            assured_concurrency_shares: None,
            limit_response: None,
        }
    }
}


