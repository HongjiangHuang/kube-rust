/*
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EventsV1Event : Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventsV1Event {
    /// action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    /// deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
    #[serde(rename = "deprecatedCount", skip_serializing_if = "Option::is_none")]
    pub deprecated_count: Option<i32>,
    /// deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
    #[serde(rename = "deprecatedFirstTimestamp", skip_serializing_if = "Option::is_none")]
    pub deprecated_first_timestamp: Option<String>,
    /// deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
    #[serde(rename = "deprecatedLastTimestamp", skip_serializing_if = "Option::is_none")]
    pub deprecated_last_timestamp: Option<String>,
    #[serde(rename = "deprecatedSource", skip_serializing_if = "Option::is_none")]
    pub deprecated_source: Option<Box<crate::models::V1EventSource>>,
    /// eventTime is the time when this Event was first observed. It is required.
    #[serde(rename = "eventTime")]
    pub event_time: String,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<crate::models::V1ObjectMeta>>,
    /// note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    /// reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "regarding", skip_serializing_if = "Option::is_none")]
    pub regarding: Option<Box<crate::models::V1ObjectReference>>,
    #[serde(rename = "related", skip_serializing_if = "Option::is_none")]
    pub related: Option<Box<crate::models::V1ObjectReference>>,
    /// reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
    #[serde(rename = "reportingController", skip_serializing_if = "Option::is_none")]
    pub reporting_controller: Option<String>,
    /// reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
    #[serde(rename = "reportingInstance", skip_serializing_if = "Option::is_none")]
    pub reporting_instance: Option<String>,
    #[serde(rename = "series", skip_serializing_if = "Option::is_none")]
    pub series: Option<Box<crate::models::EventsV1EventSeries>>,
    /// type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
}

impl EventsV1Event {
    /// Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
    pub fn new(event_time: String) -> EventsV1Event {
        EventsV1Event {
            action: None,
            api_version: None,
            deprecated_count: None,
            deprecated_first_timestamp: None,
            deprecated_last_timestamp: None,
            deprecated_source: None,
            event_time,
            kind: None,
            metadata: None,
            note: None,
            reason: None,
            regarding: None,
            related: None,
            reporting_controller: None,
            reporting_instance: None,
            series: None,
            _type: None,
        }
    }
}


