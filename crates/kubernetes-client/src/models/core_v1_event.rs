/*
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CoreV1Event : Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreV1Event {
    /// What action was taken/failed regarding to the Regarding object.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    /// The number of times this event has occurred.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// Time when this Event was first observed.
    #[serde(rename = "eventTime", skip_serializing_if = "Option::is_none")]
    pub event_time: Option<String>,
    /// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
    #[serde(rename = "firstTimestamp", skip_serializing_if = "Option::is_none")]
    pub first_timestamp: Option<String>,
    #[serde(rename = "involvedObject")]
    pub involved_object: Box<crate::models::V1ObjectReference>,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The time at which the most recent occurrence of this event was recorded.
    #[serde(rename = "lastTimestamp", skip_serializing_if = "Option::is_none")]
    pub last_timestamp: Option<String>,
    /// A human-readable description of the status of this operation.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "metadata")]
    pub metadata: Box<crate::models::V1ObjectMeta>,
    /// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "related", skip_serializing_if = "Option::is_none")]
    pub related: Option<Box<crate::models::V1ObjectReference>>,
    /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
    #[serde(rename = "reportingComponent", skip_serializing_if = "Option::is_none")]
    pub reporting_component: Option<String>,
    /// ID of the controller instance, e.g. `kubelet-xyzf`.
    #[serde(rename = "reportingInstance", skip_serializing_if = "Option::is_none")]
    pub reporting_instance: Option<String>,
    #[serde(rename = "series", skip_serializing_if = "Option::is_none")]
    pub series: Option<Box<crate::models::CoreV1EventSeries>>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::V1EventSource>>,
    /// Type of this event (Normal, Warning), new types could be added in the future
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
}

impl CoreV1Event {
    /// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
    pub fn new(involved_object: crate::models::V1ObjectReference, metadata: crate::models::V1ObjectMeta) -> CoreV1Event {
        CoreV1Event {
            action: None,
            api_version: None,
            count: None,
            event_time: None,
            first_timestamp: None,
            involved_object: Box::new(involved_object),
            kind: None,
            last_timestamp: None,
            message: None,
            metadata: Box::new(metadata),
            reason: None,
            related: None,
            reporting_component: None,
            reporting_instance: None,
            series: None,
            source: None,
            _type: None,
        }
    }
}


