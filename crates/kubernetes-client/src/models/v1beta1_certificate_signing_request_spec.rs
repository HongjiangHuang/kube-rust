/*
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// V1beta1CertificateSigningRequestSpec : This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1beta1CertificateSigningRequestSpec {
    /// Extra information about the requesting user. See user.Info interface for details.
    #[serde(rename = "extra", skip_serializing_if = "Option::is_none")]
    pub extra: Option<::std::collections::HashMap<String, Vec<String>>>,
    /// Group information about the requesting user. See user.Info interface for details.
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// Base64-encoded PKCS#10 CSR data
    #[serde(rename = "request")]
    pub request: String,
    /// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:  1. If it's a kubelet client certificate, it is assigned     \"kubernetes.io/kube-apiserver-client-kubelet\".  2. If it's a kubelet serving certificate, it is assigned     \"kubernetes.io/kubelet-serving\".  3. Otherwise, it is assigned \"kubernetes.io/legacy-unknown\". Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
    #[serde(rename = "signerName", skip_serializing_if = "Option::is_none")]
    pub signer_name: Option<String>,
    /// UID information about the requesting user. See user.Info interface for details.
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid values are:  \"signing\",  \"digital signature\",  \"content commitment\",  \"key encipherment\",  \"key agreement\",  \"data encipherment\",  \"cert sign\",  \"crl sign\",  \"encipher only\",  \"decipher only\",  \"any\",  \"server auth\",  \"client auth\",  \"code signing\",  \"email protection\",  \"s/mime\",  \"ipsec end system\",  \"ipsec tunnel\",  \"ipsec user\",  \"timestamping\",  \"ocsp signing\",  \"microsoft sgc\",  \"netscape sgc\"
    #[serde(rename = "usages", skip_serializing_if = "Option::is_none")]
    pub usages: Option<Vec<String>>,
    /// Information about the requesting user. See user.Info interface for details.
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl V1beta1CertificateSigningRequestSpec {
    /// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
    pub fn new(request: String) -> V1beta1CertificateSigningRequestSpec {
        V1beta1CertificateSigningRequestSpec {
            extra: None,
            groups: None,
            request,
            signer_name: None,
            uid: None,
            usages: None,
            username: None,
        }
    }
}


